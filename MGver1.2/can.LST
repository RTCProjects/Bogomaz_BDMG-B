C166 COMPILER V7.53.0.0, CAN                                                               11/23/2017 15:38:32 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE CAN
OBJECT MODULE PLACED IN can.OBJ
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE can.c BROWSE MOD167 DEBUG TABS(2) 

 stmt lvl     source

    1         #include "can.h"
    2         #include "settings.h"
    3         #include "protocol.h"
    4         #include "system.h"
    5         
    6         static uint8  txEnable = 0;
    7         
    8         uint16  packID = 0;     //ИД по к-ому передается пакет
    9         uint8   packIndex = 0;  //индекс передаваемого блока в пакете данных
   10         uint8   packCount = 0;  //кол-во блоков
   11         uint8   packLastSize = 0; //размер последнего блока
   12         uint8   *packData;          //оказатель на блок пакетов
   13         
   14         sbit CAN0IR = CAN_IC0^7;
   15         
   16         void CAN_Interrupt0() interrupt 0x54  
   17         {
   18  1        uint8 currentPackLen = 8;
   19  1        
   20  1        txEnable = 1;
   21  1        
   22  1        if(packIndex < packCount){
   23  2      
   24  2          if(packIndex == packCount - 1)
   25  2            if(packLastSize != 0)
   26  2              currentPackLen = packLastSize;
   27  2          
   28  2          CAN_SendMessageIT(packID, packData,currentPackLen);
   29  2          
   30  2            packData += 8;
   31  2            packIndex++;
   32  2        }
   33  1      }
   34         
   35         void CAN_Interrupt1() interrupt 0x55    //индекс 0x00X
   36         {
   37  1        uint16 regID = ((CAN_Message_16[3].MOARH >> 2) & 0x000F);
   38  1        uint8 *msgData = (uint8*)malloc(sizeof(uint8) * 8);
   39  1        if(msgData)
   40  1        {
   41  2          *((uint16*)&msgData[0]) = CAN_Message_16[3].MODATALL;
   42  2          *((uint16*)&msgData[2]) = CAN_Message_16[3].MODATALH;
   43  2          *((uint16*)&msgData[4]) = CAN_Message_16[3].MODATAHL;
   44  2          *((uint16*)&msgData[6]) = CAN_Message_16[3].MODATAHH;
   45  2      
   46  2        Protocol_ReceiveMsgCallback(regID,msgData);
   47  2      
   48  2        free(msgData);
   49  2        }
   50  1        
   51  1      }
   52         
   53         void CAN_Interrupt2() interrupt 0x56      //индекс 0x20X
   54         {
   55  1      /*
C166 COMPILER V7.53.0.0, CAN                                                               11/23/2017 15:38:32 PAGE 2   

   56  1        uint16 regID = ((CAN_Message_16[4].MOARH >> 2) & 0x07FF);
   57  1        uint8 msgData[8];
   58  1      
   59  1          *((uint16*)&msgData[0]) = CAN_Message_16[4].MODATALL;
   60  1          *((uint16*)&msgData[2]) = CAN_Message_16[4].MODATALH;
   61  1          *((uint16*)&msgData[4]) = CAN_Message_16[4].MODATAHL;
   62  1          *((uint16*)&msgData[6]) = CAN_Message_16[4].MODATAHH;
   63  1      */
   64  1      
   65  1      }
   66         void CAN_Interrupt3() interrupt CAN3IC_VEC
   67         {
   68  1        unsigned int far *pReprogWord = (unsigned int far *) 0x50000;
   69  1        
   70  1        uint8 msgData[8];
   71  1        uint32 serialNumber = 0;
   72  1        
   73  1          *((uint16*)&msgData[0]) = CAN_Message_16[5].MODATALL;
   74  1          *((uint16*)&msgData[2]) = CAN_Message_16[5].MODATALH;
   75  1          *((uint16*)&msgData[4]) = CAN_Message_16[5].MODATAHL;
   76  1          *((uint16*)&msgData[6]) = CAN_Message_16[5].MODATAHH;
   77  1        
   78  1        //тестовый код для запуска загрузчика
   79  1        //if(regID == 0x000)
   80  1          if(msgData[0] == 0xD2 && msgData[1] == 0x2D && msgData[2] == 0x00 && msgData[3] == 0x00 &&
   81  1             msgData[4] == 0xFF && msgData[5] == 0xFF && msgData[6] == 0xFF && msgData[7] == 0xFF)
   82  1            {
   83  2              //на запрос серийного номера, отправим серийный номер те
             -кущего устройства
   84  2              memcpy(msgData + 4,(uint32*)&SerialNumberBD,4);
   85  2              //и его аппаратный номер
   86  2              msgData[3] = HARDWARE_NUMBER;
   87  2              
   88  2              CAN_SendMessage(0x000,msgData,8);
   89  2              /*__asm
   90  2              {
   91  2                PUSH R2
   92  2                MOV R2 #1234H
   93  2                EXTS #05H #1H
   94  2                MOV 0000H R2
   95  2                POP R2
   96  2                
   97  2                SRST
   98  2              }*/
   99  2            }
  100  1          if(msgData[0] == 0xD3 && msgData[1] == 0x3D && msgData[2] == 0x00){
  101  2            memcpy((uint32*)&serialNumber,(uint8*)msgData + 4,4);
  102  2            
  103  2            if(serialNumber == SerialNumberBD && msgData[3] == HARDWARE_NUMBER)
  104  2            {
  105  3              *pReprogWord = 0x1234;
  106  3              
  107  3              __asm {SRST};
  108  3            }
  109  2            /*
  110  2            msgData[3] - SubIndex
  111  2            msgData[4 - 7] - SerialNumber
  112  2            */
  113  2          }
  114  1      }
  115         
  116         
C166 COMPILER V7.53.0.0, CAN                                                               11/23/2017 15:38:32 PAGE 3   

  117          
  118         void CAN_Init()
  119         {
  120  1        packID = 0;     //ИД по к-ому передается пакет
  121  1        packIndex = 0;  //индекс передаваемого блока в пакете данных
  122  1        packCount = 0;  //кол-во блоков
  123  1        packLastSize = 0; //размер последнего блока
  124  1        
  125  1        txEnable = 1;
  126  1      
  127  1        DP9 |= 0x000B;
  128  1        ALTSEL0P9 |= 0x0008;
  129  1        ALTSEL1P9 |= 0x0008;
  130  1        
  131  1        
  132  1        CAN_IC0 = 0x005C; //72Xh
  133  1        CAN_IC1 = 0x0060; //00Xh
  134  1        CAN_IC2 = 0x0074; //20Xh
  135  1        CAN_IC3 = 0x0068; //000
  136  1        
  137  1        NCR0  = 0x0041;   //разрешаем вносить изменения в конфигурацию
  138  1        NPCR0 = 0x0003;   //Выбрали P9.2 для приема в CAN узел 0
  139  1        NBTR0 = 0x2344;   //скорость узла 500kb/sec при тактировании 16Мгц
  140  1        NCR0  = 0x0000;   //Запрет после реконфигурации
  141  1        
  142  1        /*
  143  1          Список областей сообщений
  144  1        
  145  1          На приём
  146  1            3. 00Хh - аварийное сообщение для CAN
  147  1            2. 20Хh - сообщение с данными от БДГП-С
  148  1          На передачу
  149  1            1. 000 - CAN сообщение с настраиваемым ID
  150  1            2. 722 - данные (прерывание)
  151  1            3. 280 - передача старт/стоп
  152  1        */
  153  1        //передача
  154  1        //000 - универсальный вар.
  155  1        CAN_Message_16[0].MOCTRH = 0x0E08;
  156  1        CAN_Message_16[0].MOCTRL = 0x0000;
  157  1        CAN_Message_16[0].MOIPRL = 0x0000;  /*выбор линии прерываний для передачи -
             - 0*/
  158  1        CAN_Message_16[0].MOFCRH = 0x0802; // DLC = 8, разрешить прерывание на переда
             -чу 
  159  1         
  160  1        
  161  1        //72Xh
  162  1        /*CAN_Message_16[1].MOCTRH = 0x0080;
  163  1        CAN_Message_16[1].MOCTRL = 0x0000;
  164  1        CAN_Message_16[1].MOIPRL = 0x0000;  // выбор линии прерываний по приему - 0
  165  1        CAN_Message_16[1].MOFCRH = 0x0801;  // разрешить прерывание на прием
  166  1        
  167  1      
  168  1        CAN_Message_16[2].MOCTRH = 0x0E08;
  169  1        CAN_Message_16[2].MOCTRL = 0x0000;
  170  1        CAN_Message_16[2].MOIPRL = 0x0000;  //выбор линии прерываний для передачи -
             - 0
  171  1        CAN_Message_16[2].MOFCRH = 0x0800; // DLC = 8, запретить прерывание на переда
             -чу */
  172  1        
  173  1      
  174  1        //32X
C166 COMPILER V7.53.0.0, CAN                                                               11/23/2017 15:38:32 PAGE 4   

  175  1        CAN_Message_16[3].MOCTRH = 0x0080;
  176  1        CAN_Message_16[3].MOCTRL = 0x0000;
  177  1        CAN_Message_16[3].MOIPRL = 0x0001;  //выбор линии прерываний по приему - 1
  178  1        CAN_Message_16[3].MOFCRH = 0x0801;  //разрешить прерываение на прием
  179  1        
  180  1        //20X
  181  1        CAN_Message_16[4].MOCTRH = 0x0080;
  182  1        CAN_Message_16[4].MOCTRL = 0x0000;
  183  1        CAN_Message_16[4].MOIPRL = 0x0002;  // выбор линии прерываний по приему - 2
  184  1        CAN_Message_16[4].MOFCRH = 0x0801;  //разрешить прерываение на прием
  185  1        
  186  1        //000 - ID запуска загрузчика
  187  1        CAN_Message_16[5].MOCTRH = 0x0080;
  188  1        CAN_Message_16[5].MOCTRL = 0x0000;
  189  1        CAN_Message_16[5].MOIPRL = 0x0003;  // выбор линии прерываний по приему - 3
  190  1        CAN_Message_16[5].MOFCRH = 0x0801;  //разрешить прерываение на прием
  191  1          
  192  1      
  193  1        System_Delay(10);
  194  1        
  195  1        CAN_Message_16[0].MOARH = 0x8000;  // идентификатор 000(XXX)h - динамически ИД
  196  1        CAN_Message_16[0].MOAMRH = 0x3FFF; // маска идентификатора 
  197  1          
  198  1        CAN_Message_16[1].MOARH = 0x9C80;  // идентификатор 72Xh (X - 2,3,4)
  199  1        CAN_Message_16[1].MOAMRH = 0x3FE3; // маска идентификатора   
  200  1        
  201  1        CAN_Message_16[2].MOARH = 0x8A00;  // идентификатор 280h
  202  1        CAN_Message_16[2].MOAMRH = 0x3FFF; // маска идентификатора   
  203  1        
  204  1        CAN_Message_16[3].MOARH = 0x8C80;  // идентификатор 32Xh
  205  1        CAN_Message_16[3].MOAMRH = 0x3FE3; // маска идентификатора (00X, где X - 0,1,2,3,4
             -)
  206  1        
  207  1        CAN_Message_16[4].MOARH = 0x8800;  // идентификатор 20Xh (00X, где X - 0,1,2,3,4)
  208  1        CAN_Message_16[4].MOAMRH = 0x3FE3; // маска идентификатора 
  209  1        
  210  1        CAN_Message_16[5].MOARH = 0x8000;  // идентификатор 000h
  211  1        CAN_Message_16[5].MOAMRH = 0x3FFF; // маска идентификатора 
  212  1        
  213  1        
  214  1      
  215  1        System_Delay(10);
  216  1        
  217  1        PANCTR_H = 0x0100;         // message object 0 -> List 1
  218  1        PANCTR = 0x0002;           
  219  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  220  1         
  221  1         
  222  1        PANCTR_H = 0x0101;         // message object 1 -> List 1
  223  1        PANCTR = 0x0002;             
  224  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); 
  225  1         
  226  1         
  227  1        PANCTR_H = 0x0102;         // message object 2 -> List 1
  228  1        PANCTR = 0x0002;             
  229  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();  
  230  1         
  231  1         
  232  1        PANCTR_H = 0x0103;         // message object 3 -> List 1
  233  1        PANCTR = 0x0002;             
  234  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  235  1      
C166 COMPILER V7.53.0.0, CAN                                                               11/23/2017 15:38:32 PAGE 5   

  236  1      
  237  1        PANCTR_H = 0x0104;         // message object 4 -> List 1
  238  1        PANCTR = 0x0002;             
  239  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  240  1      
  241  1        PANCTR_H = 0x0105;         // message object 5 -> List 1
  242  1        PANCTR = 0x0002;             
  243  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();  
  244  1      
  245  1        CAN_Message_16[0].MOCTRH = 0x0020; 
  246  1        CAN_Message_16[0].MOCTRL = 0x0000;
  247  1        
  248  1        CAN_Message_16[1].MOCTRH = 0x0020; 
  249  1        CAN_Message_16[1].MOCTRL = 0x0000;
  250  1        
  251  1        CAN_Message_16[2].MOCTRH = 0x0020; 
  252  1        CAN_Message_16[2].MOCTRL = 0x0000;
  253  1        
  254  1        CAN_Message_16[3].MOCTRH = 0x0020; 
  255  1        CAN_Message_16[3].MOCTRL = 0x0000;
  256  1        
  257  1        CAN_Message_16[4].MOCTRH = 0x0020; 
  258  1        CAN_Message_16[4].MOCTRL = 0x0000;  
  259  1        
  260  1        CAN_Message_16[5].MOCTRH = 0x0020; 
  261  1        CAN_Message_16[5].MOCTRL = 0x0000;  
  262  1        
  263  1      }
  264         void CAN_SendDataPackage(uint16 id,uint8  *pData, uint8 packSize)
  265         {
  266  1        packIndex = 0;
  267  1        packCount = packSize / 8;
  268  1        packLastSize = packSize % 8;
*** WARNING C192 IN LINE 268 OF can.c: '=': value truncated
  269  1          if(packLastSize > 0)
  270  1            packCount ++;
  271  1        
  272  1        packID = id;
  273  1        packData = pData;
  274  1      
  275  1          CAN0IR = 1; //инициируем передачу
  276  1          
  277  1      }
  278         void CAN_SendMessage(uint16 id,uint8 *pData,uint8 Len)
  279         {
  280  1        CAN_SendMessageIT(id,pData,Len);
  281  1          
  282  1        System_Delay(1000);
  283  1      }
  284         void CAN_SendMessageIT(uint16 id,uint8 *pData,uint8 Len)
  285         { 
  286  1        uint8 *moData = 0;
  287  1        uint8 index = 0;
  288  1      
  289  1          /*while(txEnable == 0)
  290  1          {
  291  1            if( (NSR0 & 0x7) != 0){ //проверка acknolegment 
  292  1              //IMDB_SendCanTransmitError(0);
  293  1              break;
  294  1            }
  295  1          }*/
  296  1        
C166 COMPILER V7.53.0.0, CAN                                                               11/23/2017 15:38:32 PAGE 6   

  297  1        CAN_Message_16[0].MOFCRH &= 0xF0FF;
  298  1        CAN_Message_16[0].MOFCRH |= (uint16) (Len<<8);
  299  1        
  300  1        CAN_Message_16[0].MOARH &= 0x8000;
  301  1        CAN_Message_16[0].MOARH |= (uint16)(id<<2);
  302  1        
  303  1        
  304  1        moData = (uint8*)&CAN_Message_16[0].MODATALL;
  305  1        
  306  1        for(index = 0;index<Len;index++)
  307  1        {
  308  2          *(moData + (index)) = *(pData + index);
  309  2        }
  310  1        
  311  1          txEnable = 0;
  312  1        
  313  1        CAN_Message_16[0].MOCTRH = 0x0100;  
  314  1      
  315  1      }
  316         /*
  317         void CAN_SendProtocolData(uint8 moNubmer,uint8  *pData, int packSize)
  318         {
  319           int msgCnt = packSize / 8;
  320           int lastMsgSize = packSize % 8;
  321           int i,j = 0;
  322           
  323           uint8 arrData[8];
  324           
  325           for(i = 0;i < msgCnt;i++)
  326           {
  327             for(j = 0;j<8;j++)
  328               arrData[j] = *(pData + j + (i*8));
  329             
  330             CAN_SendMessage(moNubmer,arrData,8);
  331           }
  332         }
  333         */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1406     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           8     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
