C166 COMPILER V7.53.0.0, CAN                                                               04/25/2017 12:22:26 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE CAN
OBJECT MODULE PLACED IN can.OBJ
COMPILER INVOKED BY: C:\Keil_167\C166\BIN\C166.EXE can.c BROWSE MOD167 DEBUG TABS(2) 

 stmt lvl     source

    1         #include "can.h"
    2         #include "settings.h"
    3         #include "protocol.h"
    4         #include "system.h"
    5         
    6         static uint8  txEnable = 0;
    7         
    8         void CAN_Interrupt0() interrupt 0x54  
    9         {
   10  1        txEnable = 1;
   11  1        
   12  1      //  uint16  currentID = ((CAN_Message_16[0].MOARH >> 2) & 0x07FF);
   13  1      //  Protocol_TransmitMsgCallback(currentID);
   14  1          
   15  1        
   16  1      }
   17         
   18         void CAN_Interrupt1() interrupt 0x55    //индекс 0x00X
   19         {
   20  1        uint16 regID = ((CAN_Message_16[3].MOARH >> 2) & 0x000F);
   21  1        uint8 *msgData = (uint8*)malloc(sizeof(uint8) * 8);
   22  1        if(msgData)
   23  1        {
   24  2          *((uint16*)&msgData[0]) = CAN_Message_16[3].MODATALL;
   25  2          *((uint16*)&msgData[2]) = CAN_Message_16[3].MODATALH;
   26  2          *((uint16*)&msgData[4]) = CAN_Message_16[3].MODATAHL;
   27  2          *((uint16*)&msgData[6]) = CAN_Message_16[3].MODATAHH;
   28  2      
   29  2        Protocol_ReceiveMsgCallback(regID,msgData);
   30  2      
   31  2        free(msgData);
   32  2        }
   33  1        
   34  1      }
   35         
   36         void CAN_Interrupt2() interrupt 0x56      //индекс 0x20X
   37         {
   38  1      /*
   39  1        uint16 regID = ((CAN_Message_16[4].MOARH >> 2) & 0x07FF);
   40  1        uint8 msgData[8];
   41  1      
   42  1          *((uint16*)&msgData[0]) = CAN_Message_16[4].MODATALL;
   43  1          *((uint16*)&msgData[2]) = CAN_Message_16[4].MODATALH;
   44  1          *((uint16*)&msgData[4]) = CAN_Message_16[4].MODATAHL;
   45  1          *((uint16*)&msgData[6]) = CAN_Message_16[4].MODATAHH;
   46  1      */
   47  1      
   48  1      }
   49         
   50          
   51         void CAN_Init()
   52         {
   53  1        txEnable = 1;
   54  1      
   55  1        DP9 |= 0x000B;
C166 COMPILER V7.53.0.0, CAN                                                               04/25/2017 12:22:26 PAGE 2   

   56  1        ALTSEL0P9 |= 0x0008;
   57  1        ALTSEL1P9 |= 0x0008;
   58  1        
   59  1        
   60  1        CAN_IC0 = 0x005C; //72Xh
   61  1        CAN_IC1 = 0x0060; //00Xh
   62  1        CAN_IC2 = 0x0074; //20Xh
   63  1        
   64  1        NCR0  = 0x0041;   //разрешаем вносить изменения в конфигурацию
   65  1        NPCR0 = 0x0003;   //Выбрали P9.2 для приема в CAN узел 0
   66  1        NBTR0 = 0x2344;   //скорость узла 500kb/sec при тактировании 16Мгц
   67  1        NCR0  = 0x0000;   //Запрет после реконфигурации
   68  1        
   69  1        /*
   70  1          Список областей сообщений
   71  1        
   72  1          На приём
   73  1            3. 00Хh - аварийное сообщение для CAN
   74  1            2. 20Хh - сообщение с данными от БДГП-С
   75  1          На передачу
   76  1            1. 000 - CAN сообщение с настраиваемым ID
   77  1            2. 722 - данные (прерывание)
   78  1            3. 280 - передача старт/стоп
   79  1        */
   80  1        //передача
   81  1        //000 - универсальный вар.
   82  1        CAN_Message_16[0].MOCTRH = 0x0E08;
   83  1        CAN_Message_16[0].MOCTRL = 0x0000;
   84  1        CAN_Message_16[0].MOIPRL = 0x0000;  /*выбор линии прерываний для передачи -
             - 0*/
   85  1        CAN_Message_16[0].MOFCRH = 0x0802; // DLC = 8, разрешить прерывание на переда
             -чу 
   86  1         
   87  1        
   88  1        //72Xh
   89  1        /*CAN_Message_16[1].MOCTRH = 0x0080;
   90  1        CAN_Message_16[1].MOCTRL = 0x0000;
   91  1        CAN_Message_16[1].MOIPRL = 0x0000;  // выбор линии прерываний по приему - 0
   92  1        CAN_Message_16[1].MOFCRH = 0x0801;  // разрешить прерывание на прием
   93  1        
   94  1      
   95  1        CAN_Message_16[2].MOCTRH = 0x0E08;
   96  1        CAN_Message_16[2].MOCTRL = 0x0000;
   97  1        CAN_Message_16[2].MOIPRL = 0x0000;  //выбор линии прерываний для передачи -
             - 0
   98  1        CAN_Message_16[2].MOFCRH = 0x0800; // DLC = 8, запретить прерывание на переда
             -чу */
   99  1        
  100  1      
  101  1        //32X
  102  1        CAN_Message_16[3].MOCTRH = 0x0080;
  103  1        CAN_Message_16[3].MOCTRL = 0x0000;
  104  1        CAN_Message_16[3].MOIPRL = 0x0001;  //выбор линии прерываний по приему - 1
  105  1        CAN_Message_16[3].MOFCRH = 0x0801;  //разрешить прерываение на прием
  106  1        
  107  1        //20X
  108  1        CAN_Message_16[4].MOCTRH = 0x0080;
  109  1        CAN_Message_16[4].MOCTRL = 0x0000;
  110  1        CAN_Message_16[4].MOIPRL = 0x0002;  // выбор линии прерываний по приему - 2
  111  1        CAN_Message_16[4].MOFCRH = 0x0801;  //разрешить прерываение на прием
  112  1      
  113  1        System_Delay(10);
C166 COMPILER V7.53.0.0, CAN                                                               04/25/2017 12:22:26 PAGE 3   

  114  1        
  115  1        CAN_Message_16[0].MOARH = 0x8000;  // идентификатор 000(XXX)h - динамически ИД
  116  1        CAN_Message_16[0].MOAMRH = 0x3FFF; // маска идентификатора 
  117  1          
  118  1        CAN_Message_16[1].MOARH = 0x9C80;  // идентификатор 72Xh (X - 2,3,4)
  119  1        CAN_Message_16[1].MOAMRH = 0x3FE3; // маска идентификатора   
  120  1        
  121  1        CAN_Message_16[2].MOARH = 0x8A00;  // идентификатор 280h
  122  1        CAN_Message_16[2].MOAMRH = 0x3FFF; // маска идентификатора   
  123  1        
  124  1        CAN_Message_16[3].MOARH = 0x8C80;  // идентификатор 32Xh
  125  1        CAN_Message_16[3].MOAMRH = 0x3FE3; // маска идентификатора (00X, где X - 0,1,2,3,4
             -)
  126  1        
  127  1        CAN_Message_16[4].MOARH = 0x8800;  // идентификатор 20Xh (00X, где X - 0,1,2,3,4)
  128  1        CAN_Message_16[4].MOAMRH = 0x3FE3; // маска идентификатора 
  129  1      
  130  1        System_Delay(10);
  131  1        
  132  1        PANCTR_H = 0x0100;         // message object 0 -> List 1
  133  1        PANCTR = 0x0002;           
  134  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  135  1         
  136  1         
  137  1        PANCTR_H = 0x0101;         // message object 1 -> List 1
  138  1        PANCTR = 0x0002;             
  139  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); 
  140  1         
  141  1         
  142  1        PANCTR_H = 0x0102;         // message object 2 -> List 1
  143  1        PANCTR = 0x0002;             
  144  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();  
  145  1         
  146  1         
  147  1        PANCTR_H = 0x0103;         // message object 3 -> List 1
  148  1        PANCTR = 0x0002;             
  149  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  150  1      
  151  1      
  152  1        PANCTR_H = 0x0104;         // message object 4 -> List 1
  153  1        PANCTR = 0x0002;             
  154  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  155  1      
  156  1      
  157  1        CAN_Message_16[0].MOCTRH = 0x0020; 
  158  1        CAN_Message_16[0].MOCTRL = 0x0000;
  159  1        
  160  1        CAN_Message_16[1].MOCTRH = 0x0020; 
  161  1        CAN_Message_16[1].MOCTRL = 0x0000;
  162  1        
  163  1        CAN_Message_16[2].MOCTRH = 0x0020; 
  164  1        CAN_Message_16[2].MOCTRL = 0x0000;
  165  1        
  166  1        CAN_Message_16[3].MOCTRH = 0x0020; 
  167  1        CAN_Message_16[3].MOCTRL = 0x0000;
  168  1        
  169  1        CAN_Message_16[4].MOCTRH = 0x0020; 
  170  1        CAN_Message_16[4].MOCTRL = 0x0000;  
  171  1        
  172  1      }
  173         
  174         
C166 COMPILER V7.53.0.0, CAN                                                               04/25/2017 12:22:26 PAGE 4   

  175         void CAN_SendMessage(uint16 id,uint8 *pData,uint8 Len)
  176         { 
  177  1        uint8 *moData = 0;
  178  1        uint8 index = 0;
  179  1      
  180  1          /*while(txEnable == 0)
  181  1          {
  182  1            if( (NSR0 & 0x7) != 0){ //проверка acknolegment 
  183  1              //IMDB_SendCanTransmitError(0);
  184  1              break;
  185  1            }
  186  1          }*/
  187  1        
  188  1        CAN_Message_16[0].MOFCRH &= 0xF0FF;
  189  1        CAN_Message_16[0].MOFCRH |= (uint16) (Len<<8);
  190  1        
  191  1        CAN_Message_16[0].MOARH &= 0x8000;
  192  1        CAN_Message_16[0].MOARH |= (uint16)(id<<2);
  193  1        
  194  1        
  195  1        moData = (uint8*)&CAN_Message_16[0].MODATALL;
  196  1        
  197  1        for(index = 0;index<Len;index++)
  198  1        {
  199  2          *(moData + (index)) = *(pData + index);
  200  2        }
  201  1        
  202  1          txEnable = 0;
  203  1        
  204  1        CAN_Message_16[0].MOCTRH = 0x0100;  
  205  1        
  206  1        System_Delay(1000);
  207  1      }
  208         /*
  209         void CAN_SendProtocolData(uint8 moNubmer,uint8  *pData, int packSize)
  210         {
  211           int msgCnt = packSize / 8;
  212           int lastMsgSize = packSize % 8;
  213           int i,j = 0;
  214           
  215           uint8 arrData[8];
  216           
  217           for(i = 0;i < msgCnt;i++)
  218           {
  219             for(j = 0;j<8;j++)
  220               arrData[j] = *(pData + j + (i*8));
  221             
  222             CAN_SendMessage(moNubmer,arrData,8);
  223           }
  224         }
  225         */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         778     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           1     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
C166 COMPILER V7.53.0.0, CAN                                                               04/25/2017 12:22:26 PAGE 5   

  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           6     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
